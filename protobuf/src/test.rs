// This file is generated by rust-protobuf 3.0.0-alpha.2. Do not edit
// .proto file is parsed by protobuf-codegen-pure=3.0.0-alpha.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `test.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_ALPHA_2;

#[derive(PartialEq,Clone,Default)]
pub struct Msg1 {
    // message fields
    pub b: i32,
    // message oneof groups
    pub union: ::std::option::Option<msg1::Union>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Msg1 {
    fn default() -> &'a Msg1 {
        <Msg1 as ::protobuf::Message>::default_instance()
    }
}

impl Msg1 {
    pub fn new() -> Msg1 {
        ::std::default::Default::default()
    }

    // int32 a = 1;

    pub fn get_a(&self) -> i32 {
        match self.union {
            ::std::option::Option::Some(msg1::Union::a(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_a(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_a(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(msg1::Union::a(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_a(&mut self, v: i32) {
        self.union = ::std::option::Option::Some(msg1::Union::a(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "a",
            Msg1::has_a,
            Msg1::get_a,
            Msg1::set_a,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "b",
            |m: &Msg1| { &m.b },
            |m: &mut Msg1| { &mut m.b },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Msg1>(
            "Msg1",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for Msg1 {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(msg1::Union::a(is.read_int32()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.b = is.read_int32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.b != 0 {
            my_size += ::protobuf::rt::value_size(2, self.b, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &msg1::Union::a(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.b != 0 {
            os.write_int32(2, self.b)?;
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &msg1::Union::a(v) => {
                    os.write_int32(1, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Msg1 {
        Msg1::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static Msg1 {
        static instance: Msg1 = Msg1 {
            b: 0,
            union: ::std::option::Option::None,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for Msg1 {
    fn clear(&mut self) {
        self.union = ::std::option::Option::None;
        self.b = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Msg1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Msg1 {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Msg1`
pub mod msg1 {

    #[derive(Clone,PartialEq,Debug)]
    pub enum Union {
        a(i32),
    }

    impl ::protobuf::Oneof for Union {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Msg2 {
    // message fields
    pub b: i32,
    // message oneof groups
    pub union: ::std::option::Option<msg2::Union>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Msg2 {
    fn default() -> &'a Msg2 {
        <Msg2 as ::protobuf::Message>::default_instance()
    }
}

impl Msg2 {
    pub fn new() -> Msg2 {
        ::std::default::Default::default()
    }

    // int32 a = 1;

    pub fn get_a(&self) -> i32 {
        match self.union {
            ::std::option::Option::Some(msg2::Union::a(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_a(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_a(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(msg2::Union::a(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_a(&mut self, v: i32) {
        self.union = ::std::option::Option::Some(msg2::Union::a(v))
    }

    // int32 c = 3;

    pub fn get_c(&self) -> i32 {
        match self.union {
            ::std::option::Option::Some(msg2::Union::c(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_c(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_c(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(msg2::Union::c(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_c(&mut self, v: i32) {
        self.union = ::std::option::Option::Some(msg2::Union::c(v))
    }

    // int32 d = 4;

    pub fn get_d(&self) -> i32 {
        match self.union {
            ::std::option::Option::Some(msg2::Union::d(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_d(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_d(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(msg2::Union::d(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_d(&mut self, v: i32) {
        self.union = ::std::option::Option::Some(msg2::Union::d(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "a",
            Msg2::has_a,
            Msg2::get_a,
            Msg2::set_a,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "c",
            Msg2::has_c,
            Msg2::get_c,
            Msg2::set_c,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "d",
            Msg2::has_d,
            Msg2::get_d,
            Msg2::set_d,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "b",
            |m: &Msg2| { &m.b },
            |m: &mut Msg2| { &mut m.b },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Msg2>(
            "Msg2",
            1,
            fields,
        )
    }
}

impl ::protobuf::Message for Msg2 {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(msg2::Union::a(is.read_int32()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(msg2::Union::c(is.read_int32()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(msg2::Union::d(is.read_int32()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.b = is.read_int32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.b != 0 {
            my_size += ::protobuf::rt::value_size(2, self.b, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &msg2::Union::a(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &msg2::Union::c(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &msg2::Union::d(v) => {
                    my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.b != 0 {
            os.write_int32(2, self.b)?;
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &msg2::Union::a(v) => {
                    os.write_int32(1, v)?;
                },
                &msg2::Union::c(v) => {
                    os.write_int32(3, v)?;
                },
                &msg2::Union::d(v) => {
                    os.write_int32(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Msg2 {
        Msg2::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 1)
    }

    fn default_instance() -> &'static Msg2 {
        static instance: Msg2 = Msg2 {
            b: 0,
            union: ::std::option::Option::None,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for Msg2 {
    fn clear(&mut self) {
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.b = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Msg2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Msg2 {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Msg2`
pub mod msg2 {

    #[derive(Clone,PartialEq,Debug)]
    pub enum Union {
        a(i32),
        c(i32),
        d(i32),
    }

    impl ::protobuf::Oneof for Union {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Msg3 {
    // message fields
    pub b: i32,
    // message oneof groups
    pub union: ::std::option::Option<msg3::Union>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Msg3 {
    fn default() -> &'a Msg3 {
        <Msg3 as ::protobuf::Message>::default_instance()
    }
}

impl Msg3 {
    pub fn new() -> Msg3 {
        ::std::default::Default::default()
    }

    // int32 a = 1;

    pub fn get_a(&self) -> i32 {
        match self.union {
            ::std::option::Option::Some(msg3::Union::a(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_a(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_a(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(msg3::Union::a(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_a(&mut self, v: i32) {
        self.union = ::std::option::Option::Some(msg3::Union::a(v))
    }

    // int32 c = 2;

    pub fn get_c(&self) -> i32 {
        match self.union {
            ::std::option::Option::Some(msg3::Union::c(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_c(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_c(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(msg3::Union::c(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_c(&mut self, v: i32) {
        self.union = ::std::option::Option::Some(msg3::Union::c(v))
    }

    // int32 d = 3;

    pub fn get_d(&self) -> i32 {
        match self.union {
            ::std::option::Option::Some(msg3::Union::d(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_d(&mut self) {
        self.union = ::std::option::Option::None;
    }

    pub fn has_d(&self) -> bool {
        match self.union {
            ::std::option::Option::Some(msg3::Union::d(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_d(&mut self, v: i32) {
        self.union = ::std::option::Option::Some(msg3::Union::d(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "a",
            Msg3::has_a,
            Msg3::get_a,
            Msg3::set_a,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "c",
            Msg3::has_c,
            Msg3::get_c,
            Msg3::set_c,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "d",
            Msg3::has_d,
            Msg3::get_d,
            Msg3::set_d,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "b",
            |m: &Msg3| { &m.b },
            |m: &mut Msg3| { &mut m.b },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Msg3>(
            "Msg3",
            2,
            fields,
        )
    }
}

impl ::protobuf::Message for Msg3 {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(msg3::Union::a(is.read_int32()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(msg3::Union::c(is.read_int32()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.union = ::std::option::Option::Some(msg3::Union::d(is.read_int32()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.b = is.read_int32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.b != 0 {
            my_size += ::protobuf::rt::value_size(4, self.b, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &msg3::Union::a(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &msg3::Union::c(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &msg3::Union::d(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.b != 0 {
            os.write_int32(4, self.b)?;
        }
        if let ::std::option::Option::Some(ref v) = self.union {
            match v {
                &msg3::Union::a(v) => {
                    os.write_int32(1, v)?;
                },
                &msg3::Union::c(v) => {
                    os.write_int32(2, v)?;
                },
                &msg3::Union::d(v) => {
                    os.write_int32(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Msg3 {
        Msg3::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 2)
    }

    fn default_instance() -> &'static Msg3 {
        static instance: Msg3 = Msg3 {
            b: 0,
            union: ::std::option::Option::None,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for Msg3 {
    fn clear(&mut self) {
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.union = ::std::option::Option::None;
        self.b = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Msg3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Msg3 {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Msg3`
pub mod msg3 {

    #[derive(Clone,PartialEq,Debug)]
    pub enum Union {
        a(i32),
        c(i32),
        d(i32),
    }

    impl ::protobuf::Oneof for Union {
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ImageQuality_Message_old {
    // message fields
    pub quality: ::protobuf::ProtobufEnumOrUnknown<ImageQuality_old>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ImageQuality_Message_old {
    fn default() -> &'a ImageQuality_Message_old {
        <ImageQuality_Message_old as ::protobuf::Message>::default_instance()
    }
}

impl ImageQuality_Message_old {
    pub fn new() -> ImageQuality_Message_old {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quality",
            |m: &ImageQuality_Message_old| { &m.quality },
            |m: &mut ImageQuality_Message_old| { &mut m.quality },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ImageQuality_Message_old>(
            "ImageQuality_Message_old",
            3,
            fields,
        )
    }
}

impl ::protobuf::Message for ImageQuality_Message_old {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.quality = is.read_enum_or_unknown()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.quality != ::protobuf::ProtobufEnumOrUnknown::new(ImageQuality_old::NotSet) {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, self.quality);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.quality != ::protobuf::ProtobufEnumOrUnknown::new(ImageQuality_old::NotSet) {
            os.write_enum(1, ::protobuf::ProtobufEnumOrUnknown::value(&self.quality))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ImageQuality_Message_old {
        ImageQuality_Message_old::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 3)
    }

    fn default_instance() -> &'static ImageQuality_Message_old {
        static instance: ImageQuality_Message_old = ImageQuality_Message_old {
            quality: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for ImageQuality_Message_old {
    fn clear(&mut self) {
        self.quality = ::protobuf::ProtobufEnumOrUnknown::new(ImageQuality_old::NotSet);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ImageQuality_Message_old {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ImageQuality_Message_old {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default)]
pub struct ImageQuality_Message_new {
    // message fields
    pub quality: ::protobuf::ProtobufEnumOrUnknown<ImageQuality_new>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a ImageQuality_Message_new {
    fn default() -> &'a ImageQuality_Message_new {
        <ImageQuality_Message_new as ::protobuf::Message>::default_instance()
    }
}

impl ImageQuality_Message_new {
    pub fn new() -> ImageQuality_Message_new {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quality",
            |m: &ImageQuality_Message_new| { &m.quality },
            |m: &mut ImageQuality_Message_new| { &mut m.quality },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ImageQuality_Message_new>(
            "ImageQuality_Message_new",
            4,
            fields,
        )
    }
}

impl ::protobuf::Message for ImageQuality_Message_new {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.quality = is.read_enum_or_unknown()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.quality != ::protobuf::ProtobufEnumOrUnknown::new(ImageQuality_new::NotSet) {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, self.quality);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.quality != ::protobuf::ProtobufEnumOrUnknown::new(ImageQuality_new::NotSet) {
            os.write_enum(1, ::protobuf::ProtobufEnumOrUnknown::value(&self.quality))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> ImageQuality_Message_new {
        ImageQuality_Message_new::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 4)
    }

    fn default_instance() -> &'static ImageQuality_Message_new {
        static instance: ImageQuality_Message_new = ImageQuality_Message_new {
            quality: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for ImageQuality_Message_new {
    fn clear(&mut self) {
        self.quality = ::protobuf::ProtobufEnumOrUnknown::new(ImageQuality_new::NotSet);
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ImageQuality_Message_new {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ImageQuality_Message_new {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum ImageQuality_old {
    NotSet = 0,
    Low = 2,
    Balanced = 3,
    Best = 4,
}

impl ::protobuf::ProtobufEnum for ImageQuality_old {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ImageQuality_old> {
        match value {
            0 => ::std::option::Option::Some(ImageQuality_old::NotSet),
            2 => ::std::option::Option::Some(ImageQuality_old::Low),
            3 => ::std::option::Option::Some(ImageQuality_old::Balanced),
            4 => ::std::option::Option::Some(ImageQuality_old::Best),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ImageQuality_old] = &[
            ImageQuality_old::NotSet,
            ImageQuality_old::Low,
            ImageQuality_old::Balanced,
            ImageQuality_old::Best,
        ];
        values
    }

    fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
        ::protobuf::reflect::EnumDescriptor::new_generated_2(file_descriptor(), 0)
    }
}

impl ::std::default::Default for ImageQuality_old {
    fn default() -> Self {
        ImageQuality_old::NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for ImageQuality_old {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
}

impl ImageQuality_old {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<ImageQuality_old>("ImageQuality_old", 0)
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
pub enum ImageQuality_new {
    NotSet = 0,
    Low = 50,
    Balanced = 66,
    Best = 100,
}

impl ::protobuf::ProtobufEnum for ImageQuality_new {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ImageQuality_new> {
        match value {
            0 => ::std::option::Option::Some(ImageQuality_new::NotSet),
            50 => ::std::option::Option::Some(ImageQuality_new::Low),
            66 => ::std::option::Option::Some(ImageQuality_new::Balanced),
            100 => ::std::option::Option::Some(ImageQuality_new::Best),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ImageQuality_new] = &[
            ImageQuality_new::NotSet,
            ImageQuality_new::Low,
            ImageQuality_new::Balanced,
            ImageQuality_new::Best,
        ];
        values
    }

    fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
        ::protobuf::reflect::EnumDescriptor::new_generated_2(file_descriptor(), 1)
    }
}

impl ::std::default::Default for ImageQuality_new {
    fn default() -> Self {
        ImageQuality_new::NotSet
    }
}

impl ::protobuf::reflect::ProtobufValue for ImageQuality_new {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
}

impl ImageQuality_new {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<ImageQuality_new>("ImageQuality_new", 1)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ntest.proto\x12\x04test\"5\n\x04Msg1\x12\x10\n\x01a\x18\x01\x20\x01(\
    \x05H\0R\x01aB\0\x12\x0e\n\x01b\x18\x02\x20\x01(\x05R\x01bB\0B\t\n\x05un\
    ion\x12\0:\0\"Y\n\x04Msg2\x12\x10\n\x01a\x18\x01\x20\x01(\x05H\0R\x01aB\
    \0\x12\x10\n\x01c\x18\x03\x20\x01(\x05H\0R\x01cB\0\x12\x10\n\x01d\x18\
    \x04\x20\x01(\x05H\0R\x01dB\0\x12\x0e\n\x01b\x18\x02\x20\x01(\x05R\x01bB\
    \0B\t\n\x05union\x12\0:\0\"Y\n\x04Msg3\x12\x10\n\x01a\x18\x01\x20\x01(\
    \x05H\0R\x01aB\0\x12\x10\n\x01c\x18\x02\x20\x01(\x05H\0R\x01cB\0\x12\x10\
    \n\x01d\x18\x03\x20\x01(\x05H\0R\x01dB\0\x12\x0e\n\x01b\x18\x04\x20\x01(\
    \x05R\x01bB\0B\t\n\x05union\x12\0:\0\"P\n\x18ImageQuality_Message_old\
    \x122\n\x07quality\x18\x01\x20\x01(\x0e2\x16.test.ImageQuality_oldR\x07q\
    ualityB\0:\0\"P\n\x18ImageQuality_Message_new\x122\n\x07quality\x18\x01\
    \x20\x01(\x0e2\x16.test.ImageQuality_newR\x07qualityB\0:\0*I\n\x10ImageQ\
    uality_old\x12\x0c\n\x06NotSet\x10\0\x1a\0\x12\t\n\x03Low\x10\x02\x1a\0\
    \x12\x0e\n\x08Balanced\x10\x03\x1a\0\x12\n\n\x04Best\x10\x04\x1a\0\x1a\0\
    *I\n\x10ImageQuality_new\x12\x0c\n\x06NotSet\x10\0\x1a\0\x12\t\n\x03Low\
    \x102\x1a\0\x12\x0e\n\x08Balanced\x10B\x1a\0\x12\n\n\x04Best\x10d\x1a\0\
    \x1a\0B\0b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        let mut messages = ::std::vec::Vec::new();
        messages.push(Msg1::generated_message_descriptor_data());
        messages.push(Msg2::generated_message_descriptor_data());
        messages.push(Msg3::generated_message_descriptor_data());
        messages.push(ImageQuality_Message_old::generated_message_descriptor_data());
        messages.push(ImageQuality_Message_new::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        enums.push(ImageQuality_old::generated_enum_descriptor_data());
        enums.push(ImageQuality_new::generated_enum_descriptor_data());
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
